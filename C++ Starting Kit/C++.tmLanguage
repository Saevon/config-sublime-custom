<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<!-------------------------------------------
    File Type Support
------------------------------------------->
    <key>fileTypes</key>
    <array>
<!-------------------------------------------
    C++ File Type Support
------------------------------------------->
        <string>cpp</string>
        <string>cc</string>
        <string>cp</string>
        <string>cxx</string>
        <string>c++</string>
        <string>C</string>
        <string>h</string>
        <string>hh</string>
        <string>hpp</string>
        <string>hxx</string>
        <string>h++</string>
        <string>inl</string>
        <string>ipp</string>
    </array>
    <key>firstLineMatch</key>
    <string>-\*- C\+\+ -\*-</string>
    <key>foldingStartMarker</key>
    <string>(?x)
         /\*\*(?!\*)
        |^(?![^{]*?//|[^{]*?/\*(?!.*?\*/.*?\{)).*?\{\s*($|//|/\*(?!.*?\*/.*\S))
    </string>
    <key>foldingStopMarker</key>
    <string>(?&lt;!\*)\*\*/|^\s*\}</string>
    <key>keyEquivalent</key>
    <string>^~C</string>
<!-----------------------------------------
    Display Syntax As
------------------------------------------->
    <key>name</key>
    <string>C++</string>
    <key>patterns</key>
    <array>
<!---------------------------------------------------
    Includes (from repositories) - CCpp
--------------------------------------------------->
        <dict>
            <key>include</key>
            <string>#comments</string>
        </dict>
        <dict>
            <key>include</key>
            <string>#preprocessor-rule-enabled</string>
        </dict>
        <dict>
            <key>include</key>
            <string>#preprocessor-rule-disabled</string>
        </dict>
        <dict>
            <key>include</key>
            <string>#preprocessor-rule-other</string>
        </dict>
        <dict>
            <key>include</key>
            <string>#pragma-mark</string>
        </dict>
        <dict>
            <key>include</key>
            <string>#disabled</string>
        </dict>
<!----------------------------------------
    Raw String (exception)- CCpp
---------------------------------------->
        <dict>
            <key>begin</key>
            <string>(R|Ru|RU|uR|UR)(\"\+\*\()\.*</string>
            <key>beginCaptures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>prefix</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>begin</string>
                </dict>
            </dict>
            <key>end</key>
            <string>(\)\+\*\")</string>
            <key>endCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>end</string>
                </dict>
            </dict>
            <key>name</key>
            <string>raw.string.ccpp</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#comments</string>
                </dict>
            </array>
        </dict>
<!----------------------------------------
    Raw String - CCpp
---------------------------------------->
        <dict>
            <key>begin</key>
            <string>(R|Ru|RU|uR|UR)(\"\()\.*</string>
            <key>beginCaptures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>prefix</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>begin</string>
                </dict>
            </dict>
            <key>end</key>
            <string>(\)\")</string>
            <key>endCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>end</string>
                </dict>
            </dict>
            <key>name</key>
            <string>raw.string.ccpp</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#comments</string>
                </dict>
            </array>
        </dict>
<!----------------------------------------
    Member Initializer - CCpp
---------------------------------------->
        <!-- Saevon: Sane member initialization -->
        <dict>
            <key>begin</key>
            <string>(\:)(?!\:)</string>
            <key>end</key>
            <string>(\))(?=\s*[^\s,])|(?=;|\{)</string>

            <key>beginCaptures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.initializer-list.c++</string>
                </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.initializer.end.c++</string>
                </dict>
            </dict>

            <key>name</key>
            <string>meta.initializer-list.c++</string>

            <key>patterns</key>
            <array>
                <dict>
                    <key>begin</key>
                    <string>\b(\w+)\b\s*(\()</string>
                    <key>beginCaptures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>variable.other.member.initializer.c++</string>
                        </dict>
                        <key>2</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.initializer.begin.c++</string>
                        </dict>
                    </dict>

                    <!-- if we are missing a comma we end the entire initializer list -->
                    <!-- so jump all the way out and let the outer match handle scopes -->
                    <key>end</key>
                    <string>(?x)
                        (?=\)\s*[^\s,])
                        |(\))
                    </string>
                    <key>endCaptures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.initializer.end.c++</string>
                        </dict>
                    </dict>

                    <key>name</key>
                    <string>meta.initializer.c++</string>

                    <key>patterns</key>
                    <array>
                        <dict>
                            <!-- This only matches closing initializers which don't finish the list
                                The endCaptures above ends the initializer
                            -->
                        </dict>
                    </array>
                </dict>
            </array>
        </dict>
<!--------------------------------------
    Keyword Control - C
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\b(break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while)\b</string>
            <key>name</key>
            <string>keyword.control.c</string>
        </dict>
<!--------------------------------------
    Keyword Control - C++
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\b(catch|operator|try|throw|using|namespace)\b</string>
            <key>name</key>
            <string>keyword.control.c++</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\bdelete\b(\s*\[\])?|\bnew\b(?!])</string>
            <key>name</key>
            <string>keyword.control.c++</string>
        </dict>
<!--------------------------------------
    Keyword Operator - C++
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\b(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq)\b</string>
            <key>name</key>
            <string>keyword.operator.c++</string>
        </dict>
<!--------------------------------------
    Keyword Operator Cast - C++
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\b(const_cast|dynamic_cast|reinterpret_cast|static_cast)\b\s*</string>
            <key>name</key>
            <string>keyword.operator.cast.c++</string>
        </dict>
<!--------------------------------------
    Saevon:
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\b(typedef|assert)\b\s*</string>
            <key>name</key>
            <string>keyword.operator.type.c++</string>
        </dict>
<!--------------------------------------
    Saevon: Constants
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\b[A-Z_][A-Z0-9_]+</string>
            <key>name</key>
            <string>variable.other.constant.c</string>
        </dict>
<!--------------------------------------
    Storage Type - C
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\b(asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|string|int|long|short|signed|struct|union|unsigned|void)\b</string>
            <key>name</key>
            <string>storage.type.c</string>
        </dict>
<!--------------------------------------
    Storage Type - C++
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\b(class|wchar_t|nullptr_t)\b</string>
            <key>name</key>
            <string>storage.type.c++</string>
        </dict>
<!-----------------------------------------
    Storage Type - C++11
------------------------------------------->
        <dict>
            <key>match</key>
            <string>\b(size_t|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|char16_t|char32_t)\b</string>
            <key>name</key>
            <string>storage.type.c++11</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b([a-zA-Z0-9_]+_t)\b</string>
            <key>name</key>
            <string>storage.type.user.c++</string>
        </dict>
<!--------------------------------------
    Saevon: Standard types c++
---------------------------------------->
        <dict>
            <key>match</key>
            <string>(?x)\b(
                vector|array|list|stack|deque|queue
                |(?:unordered_)?map|(?:unordered_)?set
                |string|iostream|regex|smatch
                |algorithm|functional
            )\b</string>
            <key>name</key>
            <string>support.type.c</string>
        </dict>
<!--------------------------------------
    Storage Type Template - C++
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\btemplate\b\s*</string>
            <key>name</key>
            <string>storage.type.template.c++</string>
        </dict>
<!--------------------------------------
    Storage Modifier - C
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\b(const|extern|register|restrict|static|volatile|inline)\b</string>
            <key>name</key>
            <string>storage.modifier.c</string>
        </dict>
<!--------------------------------------
    Storage Modifier - C++
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\b(export|mutable|typename)\b</string>
            <key>name</key>
            <string>storage.modifier.c++</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(friend|explicit)\b</string>
            <key>name</key>
            <string>storage.modifier.c++</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(private|protected|public)\b\s*\:</string>
            <key>name</key>
            <string>storage.modifier.c++</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(private|protected|public)\b</string>
            <key>name</key>
            <string>storage.modifier.c++</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(export|mutable|typename)\b</string>
            <key>name</key>
            <string>storage.modifier.c++</string>
        </dict>
<!-----------------------------------------
    Storage Modifier - C++11
------------------------------------------->
        <dict>
            <key>match</key>
            <string>\b(constexpr|auto)\b</string>
            <key>name</key>
            <string>storage.modifier.c++</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(override|final|noexcept|virtual)\b</string>
            <key>name</key>
            <string>storage.modifier.c++ support.flag.c++</string>
        </dict>

<!-------------------------------------------
    Variable Other Readwrite Member - C++
    Saevon: Adds prefix captures
------------------------------------------- -->
        <dict>
            <key>match</key>
            <string>\b((?:e|f|i|g|s|v)(?:(?=[A-Z])|_))([A-Za-z0-9_]+)\b</string>
            <key>name</key>
            <string>variable.other.readwrite.c++</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>support.flag.variable.c++</string>
                </dict>
            </dict>
        </dict>
        <dict>
            <key>match</key>
            <string>\b((?:p)(?:(?=[A-Z])|_))([A-Za-z0-9_]+)\b</string>
            <key>name</key>
            <string>variable.other.pointer.c++</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>support.flag.variable.c++</string>
                </dict>
            </dict>
        </dict>
        <dict>
            <key>match</key>
            <string>\b((?:c)(?:(?=[A-Z])|_))([A-Za-z0-9_]+)\b</string>
            <key>name</key>
            <string>variable.other.constant.c++</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>support.flag.variable.c++</string>
                </dict>
            </dict>
        </dict>
        <dict>
            <key>match</key>
            <string>\b((?:m)(?:(?=[A-Z])|_))([A-Za-z0-9_]+)\b</string>
            <key>name</key>
            <string>variable.other.member.c++</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>support.flag.variable.c++</string>
                </dict>
            </dict>
        </dict>
<!----------------------------
    Variable Language - C++
----------------------------->
        <dict>
            <key>match</key>
            <string>\bthis\b</string>
            <key>name</key>
            <string>variable.language.c++</string>
        </dict>
<!--------------------------------------
    Constant Language - C
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\b(NULL|true|false|TRUE|FALSE)\b</string>
            <key>name</key>
            <string>constant.language.c</string>
        </dict>
<!-----------------------------
    Constant Language - C++
-------------------------------->
        <dict>
            <key>match</key>
            <string>\bnullptr\b</string>
            <key>name</key>
            <string>constant.language.c++</string>
        </dict>
<!--------------------------------------
    Constant Numeric - C
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b</string>
            <key>name</key>
            <string>constant.numeric.c</string>
        </dict>
<!--------------------------------------
    Saevon: Constant stdio
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\b(cout|cin|cerr|endl)\b</string>
            <key>name</key>
            <string>constant.language.c</string>
        </dict>
<!--------------------------------------
    Support Type System Types - C
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\b(u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t)\b</string>
            <key>name</key>
            <string>support.type.sys-types.c</string>
        </dict>
<!--------------------------------------
    Support Type POSIX thread- C
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\b(pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t)\b</string>
            <key>name</key>
            <string>support.type.pthread.c</string>
        </dict>
<!--------------------------------------
    Standard Input Support - C
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\b(int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t)\b</string>
            <key>name</key>
            <string>support.type.stdint.c</string>
        </dict>
<!--------------------------------------
    Constant Mac Classic C - C
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\b</string>
            <key>name</key>
            <string>support.constant.mac-classic.c</string>
        </dict>
<!--------------------------------------
    Mac Classic C System Support - C
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\b(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam|ConstStringPtr|Duration|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)\b</string>
            <key>name</key>
            <string>support.type.mac-classic.c</string>
        </dict>

<!---------------------------------------------------
    Pointer - CCpp
----------------------------------------------------->
        <dict>
            <key>match</key>
            <string>\w+\:\:\w+\*+</string>
            <key>name</key>
            <string>pointer.ccpp variable.other.pointer.ccpp</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\*+\(\w+\)</string>
            <key>name</key>
            <string>pointer.ccpp variable.other.pointer.ccpp</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\(\w+\)\*+</string>
            <key>name</key>
            <string>pointer.ccpp variable.other.pointer.ccpp</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\w+\*+</string>
            <key>name</key>
            <string>pointer.ccpp variable.other.pointer.ccpp</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\*+\w+</string>
            <key>name</key>
            <string>pointer.ccpp variable.other.pointer.ccpp</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\w+(?=->)</string>
            <key>name</key>
            <string>pointer.ccpp variable.other.pointer.ccpp</string>
        </dict>
        <!-- Saevon: Added variable pointer -->
        <!--
        <dict>
            <key>match</key>
            <string>[a-zA-Z0-9_]+(?=\.)</string>
            <key>name</key>
            <string>pointer.ccpp</string>
        </dict>
        -->



        <!-- Saevon: Adds Namespaces classes -->
        <dict>
            <key>match</key>
            <string>\b(?:(std)(::))?\b</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>support.module.ccpp</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.operator.ccpp</string>
                </dict>
            </dict>
        </dict>
        <!-- Saevon: Adds pointer classes -->
        <dict>
            <key>match</key>
            <string>\b(?:(std)(::))?(shared_ptr|weak_ptr|auto_ptr|unique_ptr)\b(?=\s*&lt;)</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>support.module.ccpp</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.operator.ccpp</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>pointer.ccpp</string>
                </dict>
            </dict>
        </dict>

<!---------------------------------------------------
    Address - CCpp
----------------------------------------------------->
        <dict>
            <key>match</key>
            <string>\&?\&\w+</string>
            <key>name</key>
            <string>address.ccpp</string>
        </dict>
        <!-- Saevon: Adds address pointers -->
        <!--
        <dict>
            <key>match</key>
            <string>[a-zA-Z0-9_]+(?=-&gt;)</string>
            <key>name</key>
            <string>address.ccpp</string>
        </dict>
        -->
<!---------------------------------------------------
    Array - CCpp
----------------------------------------------------->
        <dict>
            <key>match</key>
            <string>\w+(?=\[)</string>
            <key>name</key>
            <string>array.ccpp</string>
        </dict>
<!---------------------------------------------------
    Function Support - CCpp
----------------------------------------------------->
        <dict>
            <key>match</key>
            <string>(?&lt;=class|wchar_t|nullptr_t)\s\w+</string>
            <key>name</key>
            <string>meta.class-struct.c++ entity.name.type.c++</string>
        </dict>
        <!-- Saevon: Edited to seperate called and defined functions -->
        <dict>
            <key>match</key>
            <string> \w+(?=\([^(]*(\([^)]*\))*[^)]*? *\{)</string>
            <key>name</key>
            <string>meta.function.c entity.name.function.c</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\w+(?=\()</string>
            <key>name</key>
            <string>meta.function.c variable.function.c</string>
        </dict>
        <dict>
            <key>match</key>
            <string>(?&lt;=\.)\w+(?=[^\w|\.])</string>
            <key>name</key>
            <string>meta.function.c meta.block.c meta.function-call.c support.function.any-method.c</string>
        </dict>
        <!-- Saevon: Edited to separate the operator out -->
        <dict>
            <key>match</key>
            <string>\:\:</string>
            <key>name</key>
            <string>keyword.operator.ccpp</string>
        </dict>
        <dict>
            <key>match</key>
            <string>(?&lt;=\:\:)\w+</string>
            <key>name</key>
            <string>meta.function.c entity.name.function.c</string>
        </dict>
        <!-- Saevon: Removes bad syntax
                This would highlight the left side (usually a class/module) as a function
        <dict>
            <key>match</key>
            <string>\w+(?=\:\:)</string>
            <key>name</key>
            <string>meta.function.c entity.name.function.c</string>
        </dict>
        -->
<!--------------------------------------
    Logical Operator - CCpp
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\+\=|\-\=|\*\=|\/\=|\%\=|\&\=|\|\=|\^\=|\&lt;\&lt;\=|\&gt;\&gt;\=</string>
            <key>name</key>
            <string>keyword.operator.compound.ccpp</string>
        </dict>
<!--------------------------------------
    Logical Operator - CCpp
---------------------------------------->
        <dict>
            <key>match</key>
            <string>!(?&lt;=.)</string>
            <key>name</key>
            <string>keyword.operator.logical.ccpp</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\&\&|\|\|</string>
            <key>name</key>
            <string>keyword.operator.logical.ccpp</string>
        </dict>
<!--------------------------------------
    Bitwise Operator - CCpp
---------------------------------------->
        <dict>
            <key>match</key>
            <string>~(?&lt;=.)</string>
            <key>name</key>
            <string>keyword.operator.bitwise.ccpp</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\&|\||\^|\&lt;\&lt;|\&gt;\&gt;</string>
            <key>name</key>
            <string>keyword.operator.bitwise.ccpp</string>
        </dict>
<!--------------------------------------
    Comparison Operator - CCpp
---------------------------------------->
        <dict>
            <key>match</key>
            <string>\&gt;\=</string>
            <key>name</key>
            <string>keyword.operator.comparison.ccpp</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\&lt;\=</string>
            <key>name</key>
            <string>keyword.operator.comparison.ccpp</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\=\=|\!\=|\&lt;|\&gt;</string>
            <key>name</key>
            <string>keyword.operator.comparison.ccpp</string>
        </dict>
<!----------------------------------------
    Arithmetic operators - CCpp
------------------------------------------>
        <dict>
            <key>match</key>
            <string>\=|\+|\-|\*|\/|\%</string>
            <key>name</key>
            <string>keyword.operator.arithmetic.ccpp</string>
        </dict>
<!------------------------------------------
    Curly Brackets (exceptions)- CCpp
-------------------------------------------->
                <dict>
                    <key>match</key>
                    <string>(?&lt;=\s)\}(?=break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while)</string>
                    <key>name</key>
                    <string>open.curly.bracket.block.ccpp</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>\}(?=[^\;\s\r\n])</string>
                    <key>name</key>
                    <string>close.curly.bracket.ccpp</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>(?&lt;=[^\s\r\n])\s*\}</string>
                    <key>name</key>
                    <string>close.curly.bracket.ccpp</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>\{(?=(\s*|\t*)\/\/\s*.*(\r|\n))</string>
                    <key>name</key>
                    <string>open.curly.bracket.block.ccpp</string>
                </dict>
<!------------------------------------------
    Curly Brackets Block - CCpp
-------------------------------------------->
                <dict>
                    <key>match</key>
                    <string>\{(?=(\s*|\t*)(\r|\n))</string>
                    <key>name</key>
                    <string>open.curly.bracket.block.ccpp</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>(?&lt;=\s)\}(?=\;?)</string>
                    <key>name</key>
                    <string>close.curly.bracket.block.ccpp</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>^\}</string>
                    <key>name</key>
                    <string>close.curly.bracket.block.ccpp</string>
                </dict>
<!------------------------------------------
    Curly Brackets - CCpp
-------------------------------------------->
                <dict>
                    <key>match</key>
                    <string>\{</string>
                    <key>name</key>
                    <string>open.curly.bracket.ccpp</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>\}</string>
                    <key>name</key>
                    <string>close.curly.bracket.ccpp</string>
                </dict>
<!------------------------------------------
    Round Brackets - CCpp
-------------------------------------------->
                <dict>
                    <key>match</key>
                    <string>\(</string>
                    <key>name</key>
                    <string>open.round.bracket.ccpp</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>\)</string>
                    <key>name</key>
                    <string>close.round.bracket.ccpp</string>
                </dict>
<!------------------------------------------
    Angle Brackets - CCpp
-------------------------------------------->
                <dict>
                    <key>match</key>
                    <string>\[</string>
                    <key>name</key>
                    <string>open.angle.bracket.ccpp</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>\]</string>
                    <key>name</key>
                    <string>close.angle.bracket.ccpp</string>
                </dict>

<!------------------
    Saevon Custom Classes
------------------------------->
        <dict>
            <key>match</key>
            <string>^\s*([A-Z]+[a-zA-Z0-9_]+)(?=\s+[^\s]+( *=))</string>
            <key>name</key>
            <string>storage.type.user.c++</string>
        </dict>
        <dict>
            <key>match</key>
            <string>([a-zA-Z0-9_]+)(?=&lt;)</string>
            <key>name</key>
            <string>storage.type.user.c++</string>
        </dict>
        <dict>
            <key>match</key>
            <string>(?&lt;=&lt;)([a-zA-Z0-9_]+)(?=&gt;)</string>
            <key>name</key>
            <string>storage.type.user.c++</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(BOOL)\b</string>
            <key>name</key>
            <string>storage.modifier.c</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(no_global|rd_global|rw_global|pure|naked|noret|noreturn|wunused|aligned|nonnull|returns_nonnull|warn_unused_result|deprecated|section)\b</string>
            <key>name</key>
            <string>storage.modifier.c</string>
        </dict>

                <dict>
            <key>match</key>
            <string>\b(__VA_ARGS__)\b</string>
            <key>name</key>
            <string>variable.parameter.preprocessor.c</string>
        </dict>
        <!-- _t variables -->
        <dict>
            <key>match</key>
            <string>\b([a-zA-Z0-9_]+_t)\b</string>
            <key>name</key>
            <string>storage.type.user.c++</string>
        </dict>

<!---------------------------------------------------
    Period - CCpp
----------------------------------------------------->
                <dict>
                    <key>match</key>
                    <string>\.</string>
                    <key>name</key>
                    <string>period.ccpp</string>
                </dict>
<!---------------------------------------------------
    Coma - CCpp
----------------------------------------------------->
                <dict>
                    <key>match</key>
                    <string>\,</string>
                    <key>name</key>
                    <string>coma.ccpp</string>
                </dict>
<!---------------------------------------------------
    Semicolon End of Line (exceptions)- CCpp
----------------------------------------------------->
                <dict>
                    <key>match</key>
                    <string>\;(?=(\s*|\t*)\/\/\s*.*)</string>
                    <key>name</key>
                    <string>semi_colon.eol.ccpp</string>
                </dict>
<!---------------------------------------------------
    Semicolon End of Line - CCpp
----------------------------------------------------->
                <dict>
                    <key>match</key>
                    <string>\;(?=(\s*)(\r|\n))</string>
                    <key>name</key>
                    <string>semi_colon.eol.ccpp</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>\s*?\;\s*?$</string>
                    <key>name</key>
                    <string>semi_colon.eol.ccpp</string>
                </dict>
<!---------------------------------------------------
    Semicolon Block - CCpp
----------------------------------------------------->
                <dict>
                    <key>match</key>
                    <string>\;</string>
                    <key>name</key>
                    <string>semi_colon.ccpp</string>
                </dict>
<!--------------------------------------
    String Quoted Double - C
---------------------------------------->
        <dict>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.begin.c</string>
                </dict>
            </dict>
            <key>end</key>
            <string>"</string>
            <key>endCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.end.c</string>
                </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.double.c</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#string_escaped_char</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#string_placeholder</string>
                </dict>
            </array>
        </dict>
<!--------------------------------------
    String Quoted Single - C
---------------------------------------->
        <dict>
            <key>begin</key>
            <string>'</string>
            <key>beginCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.begin.c</string>
                </dict>
            </dict>
            <key>end</key>
            <string>'</string>
            <key>endCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.end.c</string>
                </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.single.c</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#string_escaped_char</string>
                </dict>
            </array>
        </dict>
<!--------------------------------------
    Meta Preprocessor Macro C - C
---------------------------------------->
        <dict>
            <key>begin</key>
            <string>(?x)
                ^\s*(\#)\s*(define)\s+             # define
                ((?&lt;id&gt;[a-zA-Z_][a-zA-Z0-9_]*))  # macro name
                (?:                              # and optionally:
                    (\()                         # an open parenthesis
                        (
                            \s* \g&lt;id&gt; \s*       # first argument
                            ((,) \s* \g&lt;id&gt; \s*)*  # additional arguments
                            (?:\.\.\.)?          # varargs ellipsis?
                        )
                    (\))                         # a close parenthesis
                )?
            </string>
            <key>beginCaptures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.operator.preprocessor.c</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.define.c</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>entity.name.function.preprocessor.c</string>
                </dict>
                <key>5</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.c</string>
                </dict>
                <key>6</key>
                <dict>
                    <key>name</key>
                    <string>variable.parameter.preprocessor.c</string>
                </dict>
                <key>8</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.separator.parameters.c</string>
                </dict>
                <key>9</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.c</string>
                </dict>
            </dict>
            <key>end</key>
            <string>(?=(?://|/\*))|$</string>
            <key>name</key>
            <string>meta.preprocessor.macro.c</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>(?&gt;\\\s*\n)</string>
                    <key>name</key>
                    <string>punctuation.separator.continuation.c</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>$base</string>
                </dict>
            </array>
        </dict>
<!--------------------------------------
    Meta Preprocessor Diagnostic - C
---------------------------------------->
        <dict>
            <key>begin</key>
            <string>^\s*#\s*(error|warning)\b</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.error.c</string>
                </dict>
            </dict>
            <key>end</key>
            <string>$</string>
            <key>name</key>
            <string>meta.preprocessor.diagnostic.c</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>(?&gt;\\\s*\n)</string>
                    <key>name</key>
                    <string>punctuation.separator.continuation.c</string>
                </dict>
            </array>
        </dict>
<!--------------------------------------
    Meta Preprocessor Include - C
---------------------------------------->
        <dict>
            <key>begin</key>
            <string>^\s*(#)\s*(include|import)\b\s+</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.operator.preprocessor.c</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.include.c</string>
                </dict>
            </dict>
            <key>end</key>
            <string>(?=(?://|/\*))|$</string>
            <key>name</key>
            <string>meta.preprocessor.c.include</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>(?x)(&lt;)(
                        vector|array|list|stack|deque|queue
                        |(?:unordered_)?map|(?:unordered_)?set
                        |string|iostream|regex
                        |algorithm|functional
                    )(&gt;)</string>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>keyword.operator.include.begin.c</string>
                        </dict>
                        <key>2</key>
                        <dict>
                            <key>name</key>
                            <string>support.module.c</string>
                        </dict>
                        <key>3</key>
                        <dict>
                            <key>name</key>
                            <string>keyword.operator.include.end.c</string>
                        </dict>
                    </dict>
                    <key>name</key>
                    <string>string.quoted.other.lt-gt.include.c</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>(?&gt;\\\s*\n)</string>
                    <key>name</key>
                    <string>punctuation.separator.continuation.c</string>
                </dict>
                <dict>
                    <key>begin</key>
                    <string>"</string>
                    <key>beginCaptures</key>
                    <dict>
                        <key>0</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.string.begin.c</string>
                        </dict>
                    </dict>
                    <key>end</key>
                    <string>"</string>
                    <key>endCaptures</key>
                    <dict>
                        <key>0</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.string.end.c</string>
                        </dict>
                    </dict>
                    <key>name</key>
                    <string>string.quoted.double.include.c</string>
                </dict>
                <dict>
                    <key>begin</key>
                    <string>&lt;</string>
                    <key>beginCaptures</key>
                    <dict>
                        <key>0</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.string.begin.c</string>
                        </dict>
                    </dict>
                    <key>end</key>
                    <string>&gt;</string>
                    <key>endCaptures</key>
                    <dict>
                        <key>0</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.string.end.c</string>
                        </dict>
                    </dict>
                    <key>name</key>
                    <string>string.quoted.other.lt-gt.include.c</string>
                </dict>
            </array>
        </dict>
<!--------------------------------------
    Meta Preprocessor - C
---------------------------------------->
        <dict>
            <key>begin</key>
            <string>^\s*(#)\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef)\b</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.operator.preprocessor.c</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.c</string>
                </dict>
            </dict>
            <key>end</key>
            <string>(?=(?://|/\*))|$</string>
            <key>name</key>
            <string>meta.preprocessor.c</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>(?&gt;\\\s*\n)</string>
                    <key>name</key>
                    <string>punctuation.separator.continuation.c</string>
                </dict>
            </array>
        </dict>
        </array>
<!----------------------------------------------------------------------------
    C/C++ Native Features - End
----------------------------------------------------------------------------->
<!-------------------------------------------------------------------------
--
-- Here is the beginning of the repositories which could be include in
-- patterns.
--
--
--------------------------------------------------------------------------->
    <key>repository</key>
    <dict>
<!----------------------------------------------------------------------------
    C/C++ Native Features - Begin
----------------------------------------------------------------------------->
<!--------------------------------------
    Comments - C
---------------------------------------->
        <key>comments</key>
        <dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>meta.toc-list.banner.block.c</string>
                        </dict>
                    </dict>
                    <key>match</key>
                    <string>^/\* =(\s*.*?)\s*= \*/$\n?</string>
                    <key>name</key>
                    <string>comment.block.c</string>
                </dict>
                <dict>
                    <key>begin</key>
                    <string>/\*</string>
                    <key>captures</key>
                    <dict>
                        <key>0</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.comment.c</string>
                        </dict>
                    </dict>
                    <key>end</key>
                    <string>\*/</string>
                    <key>name</key>
                    <string>comment.block.c</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>\*/.*\n</string>
                    <key>name</key>
                    <string>invalid.illegal.stray-comment-end.c</string>
                </dict>
                <dict>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>meta.toc-list.banner.line.c</string>
                        </dict>
                    </dict>
                    <key>match</key>
                    <string>^// =(\s*.*?)\s*=\s*$\n?</string>
                    <key>name</key>
                    <string>comment.line.banner.c++</string>
                </dict>
                <dict>
                    <key>begin</key>
                    <string>//</string>
                    <key>beginCaptures</key>
                    <dict>
                        <key>0</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.comment.c</string>
                        </dict>
                    </dict>
                    <key>end</key>
                    <string>$\n?</string>
                    <key>name</key>
                    <string>comment.line.double-slash.c++</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>match</key>
                            <string>(?&gt;\\\s*\n)</string>
                            <key>name</key>
                            <string>punctuation.separator.continuation.c++</string>
                        </dict>
                    </array>
                </dict>
            </array>
        </dict>
<!------------------------------------------
    Constant Character Escape - C
--------------------------------------------->
        <key>string_escaped_char</key>
        <dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>\\(\\|[abefnprtv'"?]|[0-3]\d{,2}|[4-7]\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})</string>
                    <key>name</key>
                    <string>constant.character.escape.c</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>\\.</string>
                    <key>name</key>
                    <string>invalid.illegal.unknown-escape.c</string>
                </dict>
            </array>
        </dict>
<!-------------------------------------------
    Constant Other Placeholder - C
---------------------------------------------->
        <key>string_placeholder</key>
        <dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>(?x)%
                            (\d+\$)?                             # field (argument #)
                            [#0\- +']*                           # flags
                            [,;:_]?                              # separator character (AltiVec)
                            ((-?\d+)|\*(-?\d+\$)?)?              # minimum field width
                            (\.((-?\d+)|\*(-?\d+\$)?)?)?         # precision
                            (hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier
                            [diouxXDOUeEfFgGaACcSspn%]           # conversion type
                        </string>
                    <key>name</key>
                    <string>constant.other.placeholder.c</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>%</string>
                    <key>name</key>
                    <string>invalid.illegal.placeholder.c</string>
                </dict>
            </array>
        </dict>
<!----------------------
    Disabled - C
------------------------->
        <key>disabled</key>
        <dict>
            <key>begin</key>
            <string>^\s*#\s*if(n?def)?\b.*$</string>
            <key>comment</key>
            <string>eat nested preprocessor if(def)s</string>
            <key>end</key>
            <string>^\s*#\s*endif\b</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#disabled</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#pragma-mark</string>
                </dict>
            </array>
        </dict>
<!----------------------
    Pragma Mark - C
------------------------->
        <key>pragma-mark</key>
        <dict>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>meta.preprocessor.c</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.pragma.c</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>meta.toc-list.pragma-mark.c</string>
                </dict>
            </dict>
            <key>match</key>
            <string>^\s*(#\s*(pragma\s+mark)\s+(.*))</string>
            <key>name</key>
            <string>meta.section</string>
        </dict>
<!-------------------------------------------
    Preprocessor Rule Disabled - C
---------------------------------------------->
        <key>preprocessor-rule-disabled</key>
        <dict>
            <key>begin</key>
            <string>^\s*(#(if)\s+(0)\b).*</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>meta.preprocessor.c</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.if.c</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>constant.numeric.preprocessor.c</string>
                </dict>
            </dict>
            <key>end</key>
            <string>^\s*(#\s*(endif)\b)</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>begin</key>
                    <string>^\s*(#\s*(else)\b)</string>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>meta.preprocessor.c</string>
                        </dict>
                        <key>2</key>
                        <dict>
                            <key>name</key>
                            <string>keyword.control.import.else.c</string>
                        </dict>
                    </dict>
                    <key>end</key>
                    <string>(?=^\s*#\s*endif\b)</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>$base</string>
                        </dict>
                    </array>
                </dict>
                <dict>
                    <key>begin</key>
                    <string></string>
                    <key>end</key>
                    <string>(?=^\s*#\s*(else|endif)\b)</string>
                    <key>name</key>
                    <string>comment.block.preprocessor.if-branch</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>#disabled</string>
                        </dict>
                        <dict>
                            <key>include</key>
                            <string>#pragma-mark</string>
                        </dict>
                    </array>
                </dict>
            </array>
        </dict>
<!-------------------------------------------
    Preprocessor Rule Enabled - C
---------------------------------------------->
        <key>preprocessor-rule-enabled</key>
        <dict>
            <key>begin</key>
            <string>^\s*(#(if)\s+(0*1)\b)</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>meta.preprocessor.c</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.if.c</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>constant.numeric.preprocessor.c</string>
                </dict>
            </dict>
            <key>end</key>
            <string>^\s*(#\s*(endif)\b)</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>begin</key>
                    <string>^\s*(#\s*(else)\b).*</string>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>meta.preprocessor.c</string>
                        </dict>
                        <key>2</key>
                        <dict>
                            <key>name</key>
                            <string>keyword.control.import.else.c</string>
                        </dict>
                    </dict>
                    <key>contentName</key>
                    <string>comment.block.preprocessor.else-branch</string>
                    <key>end</key>
                    <string>(?=^\s*#\s*endif\b)</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>#disabled</string>
                        </dict>
                        <dict>
                            <key>include</key>
                            <string>#pragma-mark</string>
                        </dict>
                    </array>
                </dict>
                <dict>
                    <key>begin</key>
                    <string></string>
                    <key>end</key>
                    <string>(?=^\s*#\s*(else|endif)\b)</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>$base</string>
                        </dict>
                    </array>
                </dict>
            </array>
        </dict>
<!-------------------------------------------
    Preprocessor Rule Other - C
---------------------------------------------->
        <key>preprocessor-rule-other</key>
        <dict>
            <key>begin</key>
            <string>^\s*((#)\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>meta.preprocessor.c</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.operator.preprocessor.c</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.c</string>
                </dict>
            </dict>
            <key>end</key>
            <string>^\s*((#)\s*(endif)\b)</string>

            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>$base</string>
                </dict>
            </array>
        </dict>
<!----------------------------------------------------------------------------
    C/C++ Native Features - End
----------------------------------------------------------------------------->      </dict>
    <key>scopeName</key>
    <string>source.c++</string>
    <key>uuid</key>
    <string>25066DC2-6B1D-11D9-9D5B-000D93589AF6</string>
</dict>
</plist>
